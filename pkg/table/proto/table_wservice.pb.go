// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pkg/table/proto/table_wservice.proto

package cap

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValueType 列类型
type ValueType int32

const (
	// 字符串
	ValueType_VT_STRING ValueType = 0
	// 整型
	ValueType_VT_INT ValueType = 1
	// 浮点
	ValueType_VT_DOUBLE ValueType = 2
	// 日期
	ValueType_VT_DATE ValueType = 3
	// 时间
	ValueType_VT_TIME ValueType = 4
	// 布尔
	ValueType_VT_BOOLEAN ValueType = 5
	// 选项
	ValueType_VT_OPTION ValueType = 6
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VT_STRING",
		1: "VT_INT",
		2: "VT_DOUBLE",
		3: "VT_DATE",
		4: "VT_TIME",
		5: "VT_BOOLEAN",
		6: "VT_OPTION",
	}
	ValueType_value = map[string]int32{
		"VT_STRING":  0,
		"VT_INT":     1,
		"VT_DOUBLE":  2,
		"VT_DATE":    3,
		"VT_TIME":    4,
		"VT_BOOLEAN": 5,
		"VT_OPTION":  6,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{0}
}

type HrefStyle int32

const (
	HrefStyle_HSNone   HrefStyle = 0
	HrefStyle_HSNewTab HrefStyle = 1
	HrefStyle_HSDialog HrefStyle = 2
)

// Enum value maps for HrefStyle.
var (
	HrefStyle_name = map[int32]string{
		0: "HSNone",
		1: "HSNewTab",
		2: "HSDialog",
	}
	HrefStyle_value = map[string]int32{
		"HSNone":   0,
		"HSNewTab": 1,
		"HSDialog": 2,
	}
)

func (x HrefStyle) Enum() *HrefStyle {
	p := new(HrefStyle)
	*p = x
	return p
}

func (x HrefStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HrefStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[1].Descriptor()
}

func (HrefStyle) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[1]
}

func (x HrefStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HrefStyle.Descriptor instead.
func (HrefStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{1}
}

// Order 排序方向
type Order int32

const (
	// 顺序
	Order_O_ASC Order = 0
	// 逆序
	Order_O_DESC Order = 1
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "O_ASC",
		1: "O_DESC",
	}
	Order_value = map[string]int32{
		"O_ASC":  0,
		"O_DESC": 1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[2].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[2]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{2}
}

// FilterValueType 筛选右值类型
type FilterValueType int32

const (
	// FVT_NULL 空
	FilterValueType_FVT_NULL FilterValueType = 0
	// FVT_SINGLE 单选
	FilterValueType_FVT_SINGLE FilterValueType = 1
	// FVT_MULTIPLE 多选
	FilterValueType_FVT_MULTIPLE FilterValueType = 2
)

// Enum value maps for FilterValueType.
var (
	FilterValueType_name = map[int32]string{
		0: "FVT_NULL",
		1: "FVT_SINGLE",
		2: "FVT_MULTIPLE",
	}
	FilterValueType_value = map[string]int32{
		"FVT_NULL":     0,
		"FVT_SINGLE":   1,
		"FVT_MULTIPLE": 2,
	}
)

func (x FilterValueType) Enum() *FilterValueType {
	p := new(FilterValueType)
	*p = x
	return p
}

func (x FilterValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[3].Descriptor()
}

func (FilterValueType) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[3]
}

func (x FilterValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterValueType.Descriptor instead.
func (FilterValueType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{3}
}

// FileAccessType 模板访问权限类型
type FileAccessType int32

const (
	// 私有
	FileAccessType_TA_PRIVATE FileAccessType = 0
	// 公开
	FileAccessType_TA_PUBLIC FileAccessType = 1
	// 共享
	FileAccessType_TA_SHARED FileAccessType = 2
)

// Enum value maps for FileAccessType.
var (
	FileAccessType_name = map[int32]string{
		0: "TA_PRIVATE",
		1: "TA_PUBLIC",
		2: "TA_SHARED",
	}
	FileAccessType_value = map[string]int32{
		"TA_PRIVATE": 0,
		"TA_PUBLIC":  1,
		"TA_SHARED":  2,
	}
)

func (x FileAccessType) Enum() *FileAccessType {
	p := new(FileAccessType)
	*p = x
	return p
}

func (x FileAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[4].Descriptor()
}

func (FileAccessType) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[4]
}

func (x FileAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileAccessType.Descriptor instead.
func (FileAccessType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{4}
}

// AggregateMethod 聚合方式
type AggregateMethod int32

const (
	// 无
	AggregateMethod_AM_NONE AggregateMethod = 0
	// 求和
	AggregateMethod_AM_SUM AggregateMethod = 1
	// 平均
	AggregateMethod_AM_AVG AggregateMethod = 2
)

// Enum value maps for AggregateMethod.
var (
	AggregateMethod_name = map[int32]string{
		0: "AM_NONE",
		1: "AM_SUM",
		2: "AM_AVG",
	}
	AggregateMethod_value = map[string]int32{
		"AM_NONE": 0,
		"AM_SUM":  1,
		"AM_AVG":  2,
	}
)

func (x AggregateMethod) Enum() *AggregateMethod {
	p := new(AggregateMethod)
	*p = x
	return p
}

func (x AggregateMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregateMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[5].Descriptor()
}

func (AggregateMethod) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[5]
}

func (x AggregateMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregateMethod.Descriptor instead.
func (AggregateMethod) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{5}
}

type RowActionType int32

const (
	// 自定义
	RowActionType_RAT_CUSTOM RowActionType = 0
	// JSON Schema表单
	RowActionType_RAT_JSON_FORM RowActionType = 2
	// 超链接类型
	RowActionType_RAT_HREF RowActionType = 3
)

// Enum value maps for RowActionType.
var (
	RowActionType_name = map[int32]string{
		0: "RAT_CUSTOM",
		2: "RAT_JSON_FORM",
		3: "RAT_HREF",
	}
	RowActionType_value = map[string]int32{
		"RAT_CUSTOM":    0,
		"RAT_JSON_FORM": 2,
		"RAT_HREF":      3,
	}
)

func (x RowActionType) Enum() *RowActionType {
	p := new(RowActionType)
	*p = x
	return p
}

func (x RowActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_table_proto_table_wservice_proto_enumTypes[6].Descriptor()
}

func (RowActionType) Type() protoreflect.EnumType {
	return &file_pkg_table_proto_table_wservice_proto_enumTypes[6]
}

func (x RowActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RowActionType.Descriptor instead.
func (RowActionType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{6}
}

type ConditionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConditionOperator) Reset() {
	*x = ConditionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOperator) ProtoMessage() {}

func (x *ConditionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOperator.ProtoReflect.Descriptor instead.
func (*ConditionOperator) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{0}
}

func (x *ConditionOperator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConditionOperator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// OptionValue 选项值（如枚举，小列表）
type OptionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OptionValue) Reset() {
	*x = OptionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionValue) ProtoMessage() {}

func (x *OptionValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionValue.ProtoReflect.Descriptor instead.
func (*OptionValue) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{1}
}

func (x *OptionValue) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OptionValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Value 表示通用的值，与ValueType一一对应
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to V:
	//
	//	*Value_VString
	//	*Value_VInt
	//	*Value_VDouble
	//	*Value_VDate
	//	*Value_VTime
	//	*Value_VBool
	//	*Value_VOption
	V    isValue_V `protobuf_oneof:"v"`
	Href string    `protobuf:"bytes,10,opt,name=href,proto3" json:"href,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{2}
}

func (m *Value) GetV() isValue_V {
	if m != nil {
		return m.V
	}
	return nil
}

func (x *Value) GetVString() string {
	if x, ok := x.GetV().(*Value_VString); ok {
		return x.VString
	}
	return ""
}

func (x *Value) GetVInt() int32 {
	if x, ok := x.GetV().(*Value_VInt); ok {
		return x.VInt
	}
	return 0
}

func (x *Value) GetVDouble() float64 {
	if x, ok := x.GetV().(*Value_VDouble); ok {
		return x.VDouble
	}
	return 0
}

func (x *Value) GetVDate() string {
	if x, ok := x.GetV().(*Value_VDate); ok {
		return x.VDate
	}
	return ""
}

func (x *Value) GetVTime() string {
	if x, ok := x.GetV().(*Value_VTime); ok {
		return x.VTime
	}
	return ""
}

func (x *Value) GetVBool() bool {
	if x, ok := x.GetV().(*Value_VBool); ok {
		return x.VBool
	}
	return false
}

func (x *Value) GetVOption() *OptionValue {
	if x, ok := x.GetV().(*Value_VOption); ok {
		return x.VOption
	}
	return nil
}

func (x *Value) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

type isValue_V interface {
	isValue_V()
}

type Value_VString struct {
	VString string `protobuf:"bytes,1,opt,name=v_string,json=vString,proto3,oneof"`
}

type Value_VInt struct {
	VInt int32 `protobuf:"varint,2,opt,name=v_int,json=vInt,proto3,oneof"`
}

type Value_VDouble struct {
	VDouble float64 `protobuf:"fixed64,3,opt,name=v_double,json=vDouble,proto3,oneof"`
}

type Value_VDate struct {
	// 2020-05-03 UTC
	VDate string `protobuf:"bytes,4,opt,name=v_date,json=vDate,proto3,oneof"`
}

type Value_VTime struct {
	// RFC3339 UTC
	VTime string `protobuf:"bytes,5,opt,name=v_time,json=vTime,proto3,oneof"`
}

type Value_VBool struct {
	VBool bool `protobuf:"varint,6,opt,name=v_bool,json=vBool,proto3,oneof"`
}

type Value_VOption struct {
	VOption *OptionValue `protobuf:"bytes,7,opt,name=v_option,json=vOption,proto3,oneof"`
}

func (*Value_VString) isValue_V() {}

func (*Value_VInt) isValue_V() {}

func (*Value_VDouble) isValue_V() {}

func (*Value_VDate) isValue_V() {}

func (*Value_VTime) isValue_V() {}

func (*Value_VBool) isValue_V() {}

func (*Value_VOption) isValue_V() {}

// ValueFunction 用于过滤的方法，返回一个值
type ValueFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ValueFunction) Reset() {
	*x = ValueFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueFunction) ProtoMessage() {}

func (x *ValueFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueFunction.ProtoReflect.Descriptor instead.
func (*ValueFunction) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{3}
}

func (x *ValueFunction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ValueFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetTableInfoReq 获取表信息
type GetTableInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *GetTableInfoReq) Reset() {
	*x = GetTableInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableInfoReq) ProtoMessage() {}

func (x *GetTableInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableInfoReq.ProtoReflect.Descriptor instead.
func (*GetTableInfoReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{4}
}

func (x *GetTableInfoReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

// GetTableInfoRsp 获取表回复
type GetTableInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 表名字 用户可读
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 描述 用户可读
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// 导出文件名前缀
	ExportFilePrefix string `protobuf:"bytes,4,opt,name=export_file_prefix,json=exportFilePrefix,proto3" json:"export_file_prefix,omitempty"`
}

func (x *GetTableInfoRsp) Reset() {
	*x = GetTableInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableInfoRsp) ProtoMessage() {}

func (x *GetTableInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableInfoRsp.ProtoReflect.Descriptor instead.
func (*GetTableInfoRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{5}
}

func (x *GetTableInfoRsp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTableInfoRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTableInfoRsp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GetTableInfoRsp) GetExportFilePrefix() string {
	if x != nil {
		return x.ExportFilePrefix
	}
	return ""
}

// FilterValue 过滤值
type FilterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字面上的值，由用户手动输入
	LiteralValues *Value `protobuf:"bytes,1,opt,name=literal_values,json=literalValues,proto3" json:"literal_values,omitempty"`
}

func (x *FilterValue) Reset() {
	*x = FilterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterValue) ProtoMessage() {}

func (x *FilterValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterValue.ProtoReflect.Descriptor instead.
func (*FilterValue) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{6}
}

func (x *FilterValue) GetLiteralValues() *Value {
	if x != nil {
		return x.LiteralValues
	}
	return nil
}

// Condition 过滤条件
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列id，使用 Dot'.'隔开，支持一级的联表查询(暂不支持)
	ColumnId string `protobuf:"bytes,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// 操作符id
	OperatorId string `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 值
	Values []*FilterValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{7}
}

func (x *Condition) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *Condition) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *Condition) GetValues() []*FilterValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type PageParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 页码
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 单页数量 0代表请求所有
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PageParam) Reset() {
	*x = PageParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageParam) ProtoMessage() {}

func (x *PageParam) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageParam.ProtoReflect.Descriptor instead.
func (*PageParam) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{8}
}

func (x *PageParam) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageParam) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// OrderParam 排序参数
type OrderParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列id
	ColumnId string `protobuf:"bytes,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// 排序方向
	Order Order `protobuf:"varint,2,opt,name=order,proto3,enum=cap.Order" json:"order,omitempty"`
}

func (x *OrderParam) Reset() {
	*x = OrderParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderParam) ProtoMessage() {}

func (x *OrderParam) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderParam.ProtoReflect.Descriptor instead.
func (*OrderParam) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{9}
}

func (x *OrderParam) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *OrderParam) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_O_ASC
}

// ExportTableRsp 导出表格回复
type ExportTableRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// excel binary
	ExcelData []byte `protobuf:"bytes,2,opt,name=excel_data,json=excelData,proto3" json:"excel_data,omitempty"`
}

func (x *ExportTableRsp) Reset() {
	*x = ExportTableRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTableRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTableRsp) ProtoMessage() {}

func (x *ExportTableRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTableRsp.ProtoReflect.Descriptor instead.
func (*ExportTableRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{10}
}

func (x *ExportTableRsp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ExportTableRsp) GetExcelData() []byte {
	if x != nil {
		return x.ExcelData
	}
	return nil
}

// PageInfo 分页信息
type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前页
	CurrentPage int32 `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总页数
	TotalPages int32 `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	// 总结果数
	TotalResults int32 `protobuf:"varint,4,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{11}
}

func (x *PageInfo) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *PageInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageInfo) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PageInfo) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

// CellLink 单元格链接
type CellLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	RemoteTableId string `protobuf:"bytes,1,opt,name=remote_table_id,json=remoteTableId,proto3" json:"remote_table_id,omitempty"`
	// 在表中的列id
	ColId string `protobuf:"bytes,2,opt,name=col_id,json=colId,proto3" json:"col_id,omitempty"`
	// 在外部表中对应的列id
	RemoteSearchColId string `protobuf:"bytes,3,opt,name=remote_search_col_id,json=remoteSearchColId,proto3" json:"remote_search_col_id,omitempty"`
	// 在外部表中的列id
	RemoteValueColId string `protobuf:"bytes,4,opt,name=remote_value_col_id,json=remoteValueColId,proto3" json:"remote_value_col_id,omitempty"`
}

func (x *CellLink) Reset() {
	*x = CellLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellLink) ProtoMessage() {}

func (x *CellLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellLink.ProtoReflect.Descriptor instead.
func (*CellLink) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{12}
}

func (x *CellLink) GetRemoteTableId() string {
	if x != nil {
		return x.RemoteTableId
	}
	return ""
}

func (x *CellLink) GetColId() string {
	if x != nil {
		return x.ColId
	}
	return ""
}

func (x *CellLink) GetRemoteSearchColId() string {
	if x != nil {
		return x.RemoteSearchColId
	}
	return ""
}

func (x *CellLink) GetRemoteValueColId() string {
	if x != nil {
		return x.RemoteValueColId
	}
	return ""
}

// 单元格
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 值
	// TODO deprecated.
	Value *Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// 列id
	ColumnId string `protobuf:"bytes,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// 单元格链接
	Link *CellLink `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// 多个值的情况，替换field 1
	Values []*Value `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	// 超链接风格
	HrefStyle HrefStyle `protobuf:"varint,5,opt,name=href_style,json=hrefStyle,proto3,enum=cap.HrefStyle" json:"href_style,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{13}
}

func (x *Cell) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Cell) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *Cell) GetLink() *CellLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Cell) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Cell) GetHrefStyle() HrefStyle {
	if x != nil {
		return x.HrefStyle
	}
	return HrefStyle_HSNone
}

// TableRow 表行
type TableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 该行在表中的唯一标记
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 单元格列表 顺序与模板一致
	Cells []*Cell `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	// 支持的操作类型
	SupportedActions []*RowAction `protobuf:"bytes,3,rep,name=supported_actions,json=supportedActions,proto3" json:"supported_actions,omitempty"`
}

func (x *TableRow) Reset() {
	*x = TableRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRow) ProtoMessage() {}

func (x *TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRow.ProtoReflect.Descriptor instead.
func (*TableRow) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{14}
}

func (x *TableRow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TableRow) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *TableRow) GetSupportedActions() []*RowAction {
	if x != nil {
		return x.SupportedActions
	}
	return nil
}

// GetTableRowsReq 获取列表行请求
type GetTableRowsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 排序参数
	Order *OrderParam `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// 分页参数
	Page *PageParam `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	// 模板
	Tpl *TemplateQuery `protobuf:"bytes,4,opt,name=tpl,proto3" json:"tpl,omitempty"`
}

func (x *GetTableRowsReq) Reset() {
	*x = GetTableRowsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRowsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowsReq) ProtoMessage() {}

func (x *GetTableRowsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowsReq.ProtoReflect.Descriptor instead.
func (*GetTableRowsReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{15}
}

func (x *GetTableRowsReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetTableRowsReq) GetOrder() *OrderParam {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetTableRowsReq) GetPage() *PageParam {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetTableRowsReq) GetTpl() *TemplateQuery {
	if x != nil {
		return x.Tpl
	}
	return nil
}

// GetTableRowsRsp 获取表格行回复
type GetTableRowsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行列表
	Rows []*TableRow `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	// 分页信息
	PageInfo *PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	// 聚合结果 2020.01.08 多个聚合结果
	AggregateResult []*AggregateResult `protobuf:"bytes,3,rep,name=aggregate_result,json=aggregateResult,proto3" json:"aggregate_result,omitempty"`
}

func (x *GetTableRowsRsp) Reset() {
	*x = GetTableRowsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRowsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowsRsp) ProtoMessage() {}

func (x *GetTableRowsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowsRsp.ProtoReflect.Descriptor instead.
func (*GetTableRowsRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{16}
}

func (x *GetTableRowsRsp) GetRows() []*TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetTableRowsRsp) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetTableRowsRsp) GetAggregateResult() []*AggregateResult {
	if x != nil {
		return x.AggregateResult
	}
	return nil
}

// GetTableRowByIDReq 根据ID获取行
type GetTableRowByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 行ID
	RowId string `protobuf:"bytes,2,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	// 模板 输出列
	Tpl *TemplateQuery `protobuf:"bytes,3,opt,name=tpl,proto3" json:"tpl,omitempty"`
}

func (x *GetTableRowByIDReq) Reset() {
	*x = GetTableRowByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRowByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowByIDReq) ProtoMessage() {}

func (x *GetTableRowByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowByIDReq.ProtoReflect.Descriptor instead.
func (*GetTableRowByIDReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{17}
}

func (x *GetTableRowByIDReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetTableRowByIDReq) GetRowId() string {
	if x != nil {
		return x.RowId
	}
	return ""
}

func (x *GetTableRowByIDReq) GetTpl() *TemplateQuery {
	if x != nil {
		return x.Tpl
	}
	return nil
}

// GetTableRowByIDRsp 根据ID获取行结果
type GetTableRowByIDRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表行
	Row *TableRow `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *GetTableRowByIDRsp) Reset() {
	*x = GetTableRowByIDRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRowByIDRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowByIDRsp) ProtoMessage() {}

func (x *GetTableRowByIDRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowByIDRsp.ProtoReflect.Descriptor instead.
func (*GetTableRowByIDRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{18}
}

func (x *GetTableRowByIDRsp) GetRow() *TableRow {
	if x != nil {
		return x.Row
	}
	return nil
}

// ColumnLink 列链接，表示该列位另外一个table的某一列
type ColumnLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 列id
	ColumnId string `protobuf:"bytes,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
}

func (x *ColumnLink) Reset() {
	*x = ColumnLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnLink) ProtoMessage() {}

func (x *ColumnLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnLink.ProtoReflect.Descriptor instead.
func (*ColumnLink) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{19}
}

func (x *ColumnLink) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ColumnLink) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

// ColumnFilterMethod 列过滤方法
type ColumnFilterMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator  *ConditionOperator `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	ValueType FilterValueType    `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=cap.FilterValueType" json:"value_type,omitempty"`
}

func (x *ColumnFilterMethod) Reset() {
	*x = ColumnFilterMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFilterMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFilterMethod) ProtoMessage() {}

func (x *ColumnFilterMethod) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFilterMethod.ProtoReflect.Descriptor instead.
func (*ColumnFilterMethod) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{20}
}

func (x *ColumnFilterMethod) GetOperator() *ConditionOperator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ColumnFilterMethod) GetValueType() FilterValueType {
	if x != nil {
		return x.ValueType
	}
	return FilterValueType_FVT_NULL
}

// TableColumn 表列
type TableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列id，在表中的唯一标记
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 列名，用户可读
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 列值类型
	ValueType ValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=cap.ValueType" json:"value_type,omitempty"`
	// 支持的筛选类型，长度为0代表不支持筛选
	SupportedFilters []*ColumnFilterMethod `protobuf:"bytes,4,rep,name=supported_filters,json=supportedFilters,proto3" json:"supported_filters,omitempty"`
	// 支持的聚合方法，长度为0代表不支持聚合
	SupportedAggregateMethod []AggregateMethod `protobuf:"varint,5,rep,packed,name=supported_aggregate_method,json=supportedAggregateMethod,proto3,enum=cap.AggregateMethod" json:"supported_aggregate_method,omitempty"`
	// 支持过滤的方法，如：现在/今天/明天...
	// TODO 与Method合并，不再支持该字段
	SupportedFilterValueFunctions []*ValueFunction `protobuf:"bytes,6,rep,name=supported_filter_value_functions,json=supportedFilterValueFunctions,proto3" json:"supported_filter_value_functions,omitempty"`
	// 关联列
	Link *ColumnLink `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	// 是否支持排序
	OrderAble bool `protobuf:"varint,8,opt,name=order_able,json=orderAble,proto3" json:"order_able,omitempty"`
	// 选项类型ID 仅当value_type = VT_OPTIONS时有效
	OptionTypeId string `protobuf:"bytes,9,opt,name=option_type_id,json=optionTypeId,proto3" json:"option_type_id,omitempty"`
	// value_type = VT_OPTION时，这里提供所有的选项
	Options []*OptionValue `protobuf:"bytes,10,rep,name=options,proto3" json:"options,omitempty"`
	// 是否内部使用，内部使用的列界面可不显示
	Internal bool `protobuf:"varint,11,opt,name=internal,proto3" json:"internal,omitempty"`
	// 是否必须
	Required bool `protobuf:"varint,12,opt,name=required,proto3" json:"required,omitempty"`
	// 宽度比例
	DisplayWidthRate float64 `protobuf:"fixed64,13,opt,name=display_width_rate,json=displayWidthRate,proto3" json:"display_width_rate,omitempty"`
}

func (x *TableColumn) Reset() {
	*x = TableColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableColumn) ProtoMessage() {}

func (x *TableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableColumn.ProtoReflect.Descriptor instead.
func (*TableColumn) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{21}
}

func (x *TableColumn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TableColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableColumn) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_VT_STRING
}

func (x *TableColumn) GetSupportedFilters() []*ColumnFilterMethod {
	if x != nil {
		return x.SupportedFilters
	}
	return nil
}

func (x *TableColumn) GetSupportedAggregateMethod() []AggregateMethod {
	if x != nil {
		return x.SupportedAggregateMethod
	}
	return nil
}

func (x *TableColumn) GetSupportedFilterValueFunctions() []*ValueFunction {
	if x != nil {
		return x.SupportedFilterValueFunctions
	}
	return nil
}

func (x *TableColumn) GetLink() *ColumnLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TableColumn) GetOrderAble() bool {
	if x != nil {
		return x.OrderAble
	}
	return false
}

func (x *TableColumn) GetOptionTypeId() string {
	if x != nil {
		return x.OptionTypeId
	}
	return ""
}

func (x *TableColumn) GetOptions() []*OptionValue {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TableColumn) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *TableColumn) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *TableColumn) GetDisplayWidthRate() float64 {
	if x != nil {
		return x.DisplayWidthRate
	}
	return 0
}

// TemplateQuery 模板请求
type TemplateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id/内容二选一
	//
	// Types that are assignable to Tpl:
	//
	//	*TemplateQuery_TplId
	//	*TemplateQuery_TmpTpl
	Tpl isTemplateQuery_Tpl `protobuf_oneof:"tpl"`
}

func (x *TemplateQuery) Reset() {
	*x = TemplateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateQuery) ProtoMessage() {}

func (x *TemplateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateQuery.ProtoReflect.Descriptor instead.
func (*TemplateQuery) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{22}
}

func (m *TemplateQuery) GetTpl() isTemplateQuery_Tpl {
	if m != nil {
		return m.Tpl
	}
	return nil
}

func (x *TemplateQuery) GetTplId() string {
	if x, ok := x.GetTpl().(*TemplateQuery_TplId); ok {
		return x.TplId
	}
	return ""
}

func (x *TemplateQuery) GetTmpTpl() *TemplateBody {
	if x, ok := x.GetTpl().(*TemplateQuery_TmpTpl); ok {
		return x.TmpTpl
	}
	return nil
}

type isTemplateQuery_Tpl interface {
	isTemplateQuery_Tpl()
}

type TemplateQuery_TplId struct {
	// 模板id
	TplId string `protobuf:"bytes,1,opt,name=tpl_id,json=tplId,proto3,oneof"`
}

type TemplateQuery_TmpTpl struct {
	// 临时模板，代表临时组合的模板
	TmpTpl *TemplateBody `protobuf:"bytes,2,opt,name=tmp_tpl,json=tmpTpl,proto3,oneof"`
}

func (*TemplateQuery_TplId) isTemplateQuery_Tpl() {}

func (*TemplateQuery_TmpTpl) isTemplateQuery_Tpl() {}

// GetTableColumnsReq 获取列请求
type GetTableColumnsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 模板
	Tpl *TemplateQuery `protobuf:"bytes,2,opt,name=tpl,proto3" json:"tpl,omitempty"`
}

func (x *GetTableColumnsReq) Reset() {
	*x = GetTableColumnsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableColumnsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableColumnsReq) ProtoMessage() {}

func (x *GetTableColumnsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableColumnsReq.ProtoReflect.Descriptor instead.
func (*GetTableColumnsReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{23}
}

func (x *GetTableColumnsReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetTableColumnsReq) GetTpl() *TemplateQuery {
	if x != nil {
		return x.Tpl
	}
	return nil
}

// GetTableColumnsRsp 获取列回复
type GetTableColumnsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列 列表
	Columns []*TableColumn `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *GetTableColumnsRsp) Reset() {
	*x = GetTableColumnsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableColumnsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableColumnsRsp) ProtoMessage() {}

func (x *GetTableColumnsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableColumnsRsp.ProtoReflect.Descriptor instead.
func (*GetTableColumnsRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{24}
}

func (x *GetTableColumnsRsp) GetColumns() []*TableColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

// AggregateResult 聚合结果
type AggregateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列id
	ColumnId string `protobuf:"bytes,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// 列名
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// 聚合方式
	Method AggregateMethod `protobuf:"varint,3,opt,name=method,proto3,enum=cap.AggregateMethod" json:"method,omitempty"`
	// 聚合结果
	Value *Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AggregateResult) Reset() {
	*x = AggregateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateResult) ProtoMessage() {}

func (x *AggregateResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateResult.ProtoReflect.Descriptor instead.
func (*AggregateResult) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{25}
}

func (x *AggregateResult) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *AggregateResult) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *AggregateResult) GetMethod() AggregateMethod {
	if x != nil {
		return x.Method
	}
	return AggregateMethod_AM_NONE
}

func (x *AggregateResult) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// 用户信息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户名 read-only
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 姓名 read-only
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{26}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// TemplateColumn 模板列
type TemplateColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列id
	ColumnId string `protobuf:"bytes,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// 聚合方式
	AggregateMethod AggregateMethod `protobuf:"varint,2,opt,name=aggregate_method,json=aggregateMethod,proto3,enum=cap.AggregateMethod" json:"aggregate_method,omitempty"`
	// 是否可见
	Visible bool `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
	// 列详情，read-only 创建时无需填写
	ColumnDetail *TableColumn `protobuf:"bytes,4,opt,name=column_detail,json=columnDetail,proto3" json:"column_detail,omitempty"`
}

func (x *TemplateColumn) Reset() {
	*x = TemplateColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateColumn) ProtoMessage() {}

func (x *TemplateColumn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateColumn.ProtoReflect.Descriptor instead.
func (*TemplateColumn) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{27}
}

func (x *TemplateColumn) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *TemplateColumn) GetAggregateMethod() AggregateMethod {
	if x != nil {
		return x.AggregateMethod
	}
	return AggregateMethod_AM_NONE
}

func (x *TemplateColumn) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *TemplateColumn) GetColumnDetail() *TableColumn {
	if x != nil {
		return x.ColumnDetail
	}
	return nil
}

// OutputBody 模板内容
type OutputBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可见列
	VisibleColumns []*TemplateColumn `protobuf:"bytes,1,rep,name=visible_columns,json=visibleColumns,proto3" json:"visible_columns,omitempty"`
}

func (x *OutputBody) Reset() {
	*x = OutputBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBody) ProtoMessage() {}

func (x *OutputBody) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBody.ProtoReflect.Descriptor instead.
func (*OutputBody) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{28}
}

func (x *OutputBody) GetVisibleColumns() []*TemplateColumn {
	if x != nil {
		return x.VisibleColumns
	}
	return nil
}

// FileInfo 文件信息
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 权限
	Access FileAccessType `protobuf:"varint,1,opt,name=access,proto3,enum=cap.FileAccessType" json:"access,omitempty"`
	// 共享账号列表，仅access = SHARED
	ShareList []string `protobuf:"bytes,2,rep,name=share_list,json=shareList,proto3" json:"share_list,omitempty"`
	// 创建用户 无需前端填写
	CreateUser *UserInfo `protobuf:"bytes,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	// 创建时间 无需前端填写
	CreateTime string `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 修改时间 无需前端填写
	ModifyTime string `protobuf:"bytes,5,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{29}
}

func (x *FileInfo) GetAccess() FileAccessType {
	if x != nil {
		return x.Access
	}
	return FileAccessType_TA_PRIVATE
}

func (x *FileInfo) GetShareList() []string {
	if x != nil {
		return x.ShareList
	}
	return nil
}

func (x *FileInfo) GetCreateUser() *UserInfo {
	if x != nil {
		return x.CreateUser
	}
	return nil
}

func (x *FileInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FileInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

type TemplateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 过滤器 输入配置 不影响列的筛选
	Filter *FilterBody `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// 输出配置
	Output *OutputBody `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *TemplateBody) Reset() {
	*x = TemplateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateBody) ProtoMessage() {}

func (x *TemplateBody) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateBody.ProtoReflect.Descriptor instead.
func (*TemplateBody) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{30}
}

func (x *TemplateBody) GetFilter() *FilterBody {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TemplateBody) GetOutput() *OutputBody {
	if x != nil {
		return x.Output
	}
	return nil
}

// Template 列表模板
type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 预留 "TPL_EMPTY" 为空模板，每个列表都有空模板(展示所有列)，只读
	// 预留 "TPL_DEFAULT" 为默认模板id，每个列表都有默认模板，只读
	// 创建时不填
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 文件名，全局唯一
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 表id;
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 文件信息
	FileInfo *FileInfo `protobuf:"bytes,4,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	// 模板内容
	Body *TemplateBody `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{31}
}

func (x *Template) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *Template) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *Template) GetBody() *TemplateBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// GetTableTemplatesReq 获取模板列表请求
type GetTableTemplatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *GetTableTemplatesReq) Reset() {
	*x = GetTableTemplatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableTemplatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableTemplatesReq) ProtoMessage() {}

func (x *GetTableTemplatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableTemplatesReq.ProtoReflect.Descriptor instead.
func (*GetTableTemplatesReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{32}
}

func (x *GetTableTemplatesReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

// GetTableTemplatesRsp 获取模板列表回复
type GetTableTemplatesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模板列表
	Templates []*Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *GetTableTemplatesRsp) Reset() {
	*x = GetTableTemplatesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableTemplatesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableTemplatesRsp) ProtoMessage() {}

func (x *GetTableTemplatesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableTemplatesRsp.ProtoReflect.Descriptor instead.
func (*GetTableTemplatesRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{33}
}

func (x *GetTableTemplatesRsp) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

// CreateTableTemplateReq 创建模板请求
type CreateTableTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模板
	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CreateTableTemplateReq) Reset() {
	*x = CreateTableTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableTemplateReq) ProtoMessage() {}

func (x *CreateTableTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateTableTemplateReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTableTemplateReq) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

// CreateTableTemplateRsp 创建模板回复
type CreateTableTemplateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模板 带id
	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CreateTableTemplateRsp) Reset() {
	*x = CreateTableTemplateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableTemplateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableTemplateRsp) ProtoMessage() {}

func (x *CreateTableTemplateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableTemplateRsp.ProtoReflect.Descriptor instead.
func (*CreateTableTemplateRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTableTemplateRsp) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

// DeleteTableTemplateReq 删除模板请求
type DeleteTableTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模板id
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *DeleteTableTemplateReq) Reset() {
	*x = DeleteTableTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableTemplateReq) ProtoMessage() {}

func (x *DeleteTableTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteTableTemplateReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteTableTemplateReq) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

// DeleteTableTemplateRsp 删除模板回复
type DeleteTableTemplateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTableTemplateRsp) Reset() {
	*x = DeleteTableTemplateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableTemplateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableTemplateRsp) ProtoMessage() {}

func (x *DeleteTableTemplateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableTemplateRsp.ProtoReflect.Descriptor instead.
func (*DeleteTableTemplateRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{37}
}

// Filter 过滤方案内容
type FilterBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 条件组合
	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *FilterBody) Reset() {
	*x = FilterBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBody) ProtoMessage() {}

func (x *FilterBody) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBody.ProtoReflect.Descriptor instead.
func (*FilterBody) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{38}
}

func (x *FilterBody) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type HrefAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链接地址
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	// 超链接风格
	HrefStyle HrefStyle `protobuf:"varint,5,opt,name=href_style,json=hrefStyle,proto3,enum=cap.HrefStyle" json:"href_style,omitempty"`
}

func (x *HrefAction) Reset() {
	*x = HrefAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HrefAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HrefAction) ProtoMessage() {}

func (x *HrefAction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HrefAction.ProtoReflect.Descriptor instead.
func (*HrefAction) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{39}
}

func (x *HrefAction) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *HrefAction) GetHrefStyle() HrefStyle {
	if x != nil {
		return x.HrefStyle
	}
	return HrefStyle_HSNone
}

// RowAction 行操作
type RowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ActionType RowActionType `protobuf:"varint,3,opt,name=action_type,json=actionType,proto3,enum=cap.RowActionType" json:"action_type,omitempty"`
	// action_type = RAT_JSON_FORM 时有值
	JsonFormSchema []byte `protobuf:"bytes,4,opt,name=json_form_schema,json=jsonFormSchema,proto3" json:"json_form_schema,omitempty"`
	// action_type = RAT_HREF 时有值
	HrefAction *HrefAction `protobuf:"bytes,5,opt,name=href_action,json=hrefAction,proto3" json:"href_action,omitempty"`
}

func (x *RowAction) Reset() {
	*x = RowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowAction) ProtoMessage() {}

func (x *RowAction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowAction.ProtoReflect.Descriptor instead.
func (*RowAction) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{40}
}

func (x *RowAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RowAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RowAction) GetActionType() RowActionType {
	if x != nil {
		return x.ActionType
	}
	return RowActionType_RAT_CUSTOM
}

func (x *RowAction) GetJsonFormSchema() []byte {
	if x != nil {
		return x.JsonFormSchema
	}
	return nil
}

func (x *RowAction) GetHrefAction() *HrefAction {
	if x != nil {
		return x.HrefAction
	}
	return nil
}

// DoRowFormActionReq 行操作表单请求
type DoRowFormActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 操作id
	ActionId string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// 行号
	RowId string `protobuf:"bytes,3,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	// 表单JSON
	FormJson []byte `protobuf:"bytes,4,opt,name=form_json,json=formJson,proto3" json:"form_json,omitempty"`
}

func (x *DoRowFormActionReq) Reset() {
	*x = DoRowFormActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoRowFormActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoRowFormActionReq) ProtoMessage() {}

func (x *DoRowFormActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoRowFormActionReq.ProtoReflect.Descriptor instead.
func (*DoRowFormActionReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{41}
}

func (x *DoRowFormActionReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *DoRowFormActionReq) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *DoRowFormActionReq) GetRowId() string {
	if x != nil {
		return x.RowId
	}
	return ""
}

func (x *DoRowFormActionReq) GetFormJson() []byte {
	if x != nil {
		return x.FormJson
	}
	return nil
}

// 行操作回复
type DoRowFormActionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoRowFormActionRsp) Reset() {
	*x = DoRowFormActionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoRowFormActionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoRowFormActionRsp) ProtoMessage() {}

func (x *DoRowFormActionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoRowFormActionRsp.ProtoReflect.Descriptor instead.
func (*DoRowFormActionRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{42}
}

// GetTableColumnOptionsReq 获取列选项请求
type GetTableColumnOptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId  string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ColumnId string `protobuf:"bytes,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
}

func (x *GetTableColumnOptionsReq) Reset() {
	*x = GetTableColumnOptionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableColumnOptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableColumnOptionsReq) ProtoMessage() {}

func (x *GetTableColumnOptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableColumnOptionsReq.ProtoReflect.Descriptor instead.
func (*GetTableColumnOptionsReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{43}
}

func (x *GetTableColumnOptionsReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetTableColumnOptionsReq) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

// GetTableColumnOptionsReq 获取列选项请求
type GetTableColumnOptionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 选项列表
	Options []*OptionValue `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	// 唯一标记选项类型的ID
	OptionTypeID string `protobuf:"bytes,2,opt,name=OptionTypeID,proto3" json:"OptionTypeID,omitempty"`
}

func (x *GetTableColumnOptionsRsp) Reset() {
	*x = GetTableColumnOptionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableColumnOptionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableColumnOptionsRsp) ProtoMessage() {}

func (x *GetTableColumnOptionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableColumnOptionsRsp.ProtoReflect.Descriptor instead.
func (*GetTableColumnOptionsRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{44}
}

func (x *GetTableColumnOptionsRsp) GetOptions() []*OptionValue {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *GetTableColumnOptionsRsp) GetOptionTypeID() string {
	if x != nil {
		return x.OptionTypeID
	}
	return ""
}

// GetOptionsReq 获取枚举列表
type GetOptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionTypeID string `protobuf:"bytes,1,opt,name=OptionTypeID,proto3" json:"OptionTypeID,omitempty"`
}

func (x *GetOptionsReq) Reset() {
	*x = GetOptionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionsReq) ProtoMessage() {}

func (x *GetOptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionsReq.ProtoReflect.Descriptor instead.
func (*GetOptionsReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{45}
}

func (x *GetOptionsReq) GetOptionTypeID() string {
	if x != nil {
		return x.OptionTypeID
	}
	return ""
}

// GetTableRowsLiteReq 获取行列请求Lite
// 仅支持筛选，不支持过滤列，不支持分页和排序
type GetTableRowsLiteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表id
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// 请求 column_id=?  xxx=?&yyy=?
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// 页码
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *GetTableRowsLiteReq) Reset() {
	*x = GetTableRowsLiteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRowsLiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowsLiteReq) ProtoMessage() {}

func (x *GetTableRowsLiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowsLiteReq.ProtoReflect.Descriptor instead.
func (*GetTableRowsLiteReq) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{46}
}

func (x *GetTableRowsLiteReq) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetTableRowsLiteReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetTableRowsLiteReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetTableRowsLiteReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// GetTableRowsLiteRsp 获取行列表
type GetTableRowsLiteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行列表json数组
	Rows []string `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	// 总记录数量
	TotalResults int32 `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
}

func (x *GetTableRowsLiteRsp) Reset() {
	*x = GetTableRowsLiteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRowsLiteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowsLiteRsp) ProtoMessage() {}

func (x *GetTableRowsLiteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_table_proto_table_wservice_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowsLiteRsp.ProtoReflect.Descriptor instead.
func (*GetTableRowsLiteRsp) Descriptor() ([]byte, []int) {
	return file_pkg_table_proto_table_wservice_proto_rawDescGZIP(), []int{47}
}

func (x *GetTableRowsLiteRsp) GetRows() []string {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetTableRowsLiteRsp) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

var File_pkg_table_proto_table_wservice_proto protoreflect.FileDescriptor

var file_pkg_table_proto_table_wservice_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x61, 0x70, 0x1a, 0x2d, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a,
	0x05, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04,
	0x76, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x76, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x08,
	0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x72, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x42,
	0x03, 0x0a, 0x01, 0x76, 0x22, 0x33, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x40, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x31, 0x0a, 0x0e, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x73, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4b, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x4c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x90, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x49, 0x64, 0x22,
	0xbb, 0x01, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x70,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x0a, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x48, 0x72, 0x65, 0x66, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x09, 0x68, 0x72, 0x65, 0x66, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x78, 0x0a,
	0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x52, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x70, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x03, 0x74, 0x70, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x70, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x2a,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x70, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x03, 0x74, 0x70, 0x6c, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x44, 0x52, 0x73, 0x70, 0x12,
	0x1f, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x61, 0x70, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x22, 0x44, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x63, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x10, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52,
	0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x5b, 0x0a, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x70,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x06,
	0x74, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x70, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x70, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6d, 0x70,
	0x54, 0x70, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x74, 0x70, 0x6c, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x74,
	0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x03, 0x74, 0x70,
	0x6c, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x4a, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x70,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22,
	0xc8, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x61, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x61, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x70,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9c, 0x01, 0x0a,
	0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x31, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x43,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x70, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x3c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x4f, 0x0a, 0x0a, 0x48, 0x72, 0x65, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72,
	0x65, 0x66, 0x12, 0x2d, 0x0a, 0x0a, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x48, 0x72, 0x65,
	0x66, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x72, 0x65, 0x66, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x52,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x48, 0x72,
	0x65, 0x66, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x68, 0x72, 0x65, 0x66, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x52, 0x6f, 0x77, 0x46, 0x6f,
	0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x6f, 0x72, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x6f, 0x52, 0x6f, 0x77,
	0x46, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x52, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x22, 0x6a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x22, 0x33, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x22, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x6e, 0x0a, 0x09, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x56, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x56,
	0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x56,
	0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x33, 0x0a, 0x09, 0x48, 0x72,
	0x65, 0x66, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x53, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x53, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x53, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x10, 0x02, 0x2a,
	0x1e, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x5f, 0x41, 0x53,
	0x43, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a,
	0x41, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x56, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x56, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x56, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45,
	0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x36, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4d, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x0d, 0x52, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x41, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x41, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x41, 0x54, 0x5f, 0x48, 0x52, 0x45, 0x46, 0x10, 0x03, 0x32, 0xdf, 0x0b, 0x0a,
	0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63,
	0x61, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x6d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x63,
	0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x44, 0x12, 0x17,
	0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x44, 0x52, 0x73, 0x70,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x79, 0x49, 0x44, 0x12, 0x62, 0x0a, 0x0d, 0x44, 0x6f,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01,
	0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2f, 0x44, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x61, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x6d, 0x0a, 0x0f, 0x44, 0x6f, 0x52, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x70, 0x2e, 0x44, 0x6f, 0x52, 0x6f, 0x77, 0x46, 0x6f,
	0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x61,
	0x70, 0x2e, 0x44, 0x6f, 0x52, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x44,
	0x6f, 0x52, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36,
	0x5a, 0x34, 0x6a, 0x69, 0x68, 0x75, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x63,
	0x77, 0x6a, 0x63, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x63, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_table_proto_table_wservice_proto_rawDescOnce sync.Once
	file_pkg_table_proto_table_wservice_proto_rawDescData = file_pkg_table_proto_table_wservice_proto_rawDesc
)

func file_pkg_table_proto_table_wservice_proto_rawDescGZIP() []byte {
	file_pkg_table_proto_table_wservice_proto_rawDescOnce.Do(func() {
		file_pkg_table_proto_table_wservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_table_proto_table_wservice_proto_rawDescData)
	})
	return file_pkg_table_proto_table_wservice_proto_rawDescData
}

var file_pkg_table_proto_table_wservice_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_pkg_table_proto_table_wservice_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_pkg_table_proto_table_wservice_proto_goTypes = []interface{}{
	(ValueType)(0),                   // 0: cap.ValueType
	(HrefStyle)(0),                   // 1: cap.HrefStyle
	(Order)(0),                       // 2: cap.Order
	(FilterValueType)(0),             // 3: cap.FilterValueType
	(FileAccessType)(0),              // 4: cap.FileAccessType
	(AggregateMethod)(0),             // 5: cap.AggregateMethod
	(RowActionType)(0),               // 6: cap.RowActionType
	(*ConditionOperator)(nil),        // 7: cap.ConditionOperator
	(*OptionValue)(nil),              // 8: cap.OptionValue
	(*Value)(nil),                    // 9: cap.Value
	(*ValueFunction)(nil),            // 10: cap.ValueFunction
	(*GetTableInfoReq)(nil),          // 11: cap.GetTableInfoReq
	(*GetTableInfoRsp)(nil),          // 12: cap.GetTableInfoRsp
	(*FilterValue)(nil),              // 13: cap.FilterValue
	(*Condition)(nil),                // 14: cap.Condition
	(*PageParam)(nil),                // 15: cap.PageParam
	(*OrderParam)(nil),               // 16: cap.OrderParam
	(*ExportTableRsp)(nil),           // 17: cap.ExportTableRsp
	(*PageInfo)(nil),                 // 18: cap.PageInfo
	(*CellLink)(nil),                 // 19: cap.CellLink
	(*Cell)(nil),                     // 20: cap.Cell
	(*TableRow)(nil),                 // 21: cap.TableRow
	(*GetTableRowsReq)(nil),          // 22: cap.GetTableRowsReq
	(*GetTableRowsRsp)(nil),          // 23: cap.GetTableRowsRsp
	(*GetTableRowByIDReq)(nil),       // 24: cap.GetTableRowByIDReq
	(*GetTableRowByIDRsp)(nil),       // 25: cap.GetTableRowByIDRsp
	(*ColumnLink)(nil),               // 26: cap.ColumnLink
	(*ColumnFilterMethod)(nil),       // 27: cap.ColumnFilterMethod
	(*TableColumn)(nil),              // 28: cap.TableColumn
	(*TemplateQuery)(nil),            // 29: cap.TemplateQuery
	(*GetTableColumnsReq)(nil),       // 30: cap.GetTableColumnsReq
	(*GetTableColumnsRsp)(nil),       // 31: cap.GetTableColumnsRsp
	(*AggregateResult)(nil),          // 32: cap.AggregateResult
	(*UserInfo)(nil),                 // 33: cap.UserInfo
	(*TemplateColumn)(nil),           // 34: cap.TemplateColumn
	(*OutputBody)(nil),               // 35: cap.OutputBody
	(*FileInfo)(nil),                 // 36: cap.FileInfo
	(*TemplateBody)(nil),             // 37: cap.TemplateBody
	(*Template)(nil),                 // 38: cap.Template
	(*GetTableTemplatesReq)(nil),     // 39: cap.GetTableTemplatesReq
	(*GetTableTemplatesRsp)(nil),     // 40: cap.GetTableTemplatesRsp
	(*CreateTableTemplateReq)(nil),   // 41: cap.CreateTableTemplateReq
	(*CreateTableTemplateRsp)(nil),   // 42: cap.CreateTableTemplateRsp
	(*DeleteTableTemplateReq)(nil),   // 43: cap.DeleteTableTemplateReq
	(*DeleteTableTemplateRsp)(nil),   // 44: cap.DeleteTableTemplateRsp
	(*FilterBody)(nil),               // 45: cap.FilterBody
	(*HrefAction)(nil),               // 46: cap.HrefAction
	(*RowAction)(nil),                // 47: cap.RowAction
	(*DoRowFormActionReq)(nil),       // 48: cap.DoRowFormActionReq
	(*DoRowFormActionRsp)(nil),       // 49: cap.DoRowFormActionRsp
	(*GetTableColumnOptionsReq)(nil), // 50: cap.GetTableColumnOptionsReq
	(*GetTableColumnOptionsRsp)(nil), // 51: cap.GetTableColumnOptionsRsp
	(*GetOptionsReq)(nil),            // 52: cap.GetOptionsReq
	(*GetTableRowsLiteReq)(nil),      // 53: cap.GetTableRowsLiteReq
	(*GetTableRowsLiteRsp)(nil),      // 54: cap.GetTableRowsLiteRsp
}
var file_pkg_table_proto_table_wservice_proto_depIdxs = []int32{
	8,  // 0: cap.Value.v_option:type_name -> cap.OptionValue
	9,  // 1: cap.FilterValue.literal_values:type_name -> cap.Value
	13, // 2: cap.Condition.values:type_name -> cap.FilterValue
	2,  // 3: cap.OrderParam.order:type_name -> cap.Order
	9,  // 4: cap.Cell.value:type_name -> cap.Value
	19, // 5: cap.Cell.link:type_name -> cap.CellLink
	9,  // 6: cap.Cell.values:type_name -> cap.Value
	1,  // 7: cap.Cell.href_style:type_name -> cap.HrefStyle
	20, // 8: cap.TableRow.cells:type_name -> cap.Cell
	47, // 9: cap.TableRow.supported_actions:type_name -> cap.RowAction
	16, // 10: cap.GetTableRowsReq.order:type_name -> cap.OrderParam
	15, // 11: cap.GetTableRowsReq.page:type_name -> cap.PageParam
	29, // 12: cap.GetTableRowsReq.tpl:type_name -> cap.TemplateQuery
	21, // 13: cap.GetTableRowsRsp.rows:type_name -> cap.TableRow
	18, // 14: cap.GetTableRowsRsp.page_info:type_name -> cap.PageInfo
	32, // 15: cap.GetTableRowsRsp.aggregate_result:type_name -> cap.AggregateResult
	29, // 16: cap.GetTableRowByIDReq.tpl:type_name -> cap.TemplateQuery
	21, // 17: cap.GetTableRowByIDRsp.row:type_name -> cap.TableRow
	7,  // 18: cap.ColumnFilterMethod.operator:type_name -> cap.ConditionOperator
	3,  // 19: cap.ColumnFilterMethod.value_type:type_name -> cap.FilterValueType
	0,  // 20: cap.TableColumn.value_type:type_name -> cap.ValueType
	27, // 21: cap.TableColumn.supported_filters:type_name -> cap.ColumnFilterMethod
	5,  // 22: cap.TableColumn.supported_aggregate_method:type_name -> cap.AggregateMethod
	10, // 23: cap.TableColumn.supported_filter_value_functions:type_name -> cap.ValueFunction
	26, // 24: cap.TableColumn.link:type_name -> cap.ColumnLink
	8,  // 25: cap.TableColumn.options:type_name -> cap.OptionValue
	37, // 26: cap.TemplateQuery.tmp_tpl:type_name -> cap.TemplateBody
	29, // 27: cap.GetTableColumnsReq.tpl:type_name -> cap.TemplateQuery
	28, // 28: cap.GetTableColumnsRsp.columns:type_name -> cap.TableColumn
	5,  // 29: cap.AggregateResult.method:type_name -> cap.AggregateMethod
	9,  // 30: cap.AggregateResult.value:type_name -> cap.Value
	5,  // 31: cap.TemplateColumn.aggregate_method:type_name -> cap.AggregateMethod
	28, // 32: cap.TemplateColumn.column_detail:type_name -> cap.TableColumn
	34, // 33: cap.OutputBody.visible_columns:type_name -> cap.TemplateColumn
	4,  // 34: cap.FileInfo.access:type_name -> cap.FileAccessType
	33, // 35: cap.FileInfo.create_user:type_name -> cap.UserInfo
	45, // 36: cap.TemplateBody.filter:type_name -> cap.FilterBody
	35, // 37: cap.TemplateBody.output:type_name -> cap.OutputBody
	36, // 38: cap.Template.file_info:type_name -> cap.FileInfo
	37, // 39: cap.Template.body:type_name -> cap.TemplateBody
	38, // 40: cap.GetTableTemplatesRsp.templates:type_name -> cap.Template
	38, // 41: cap.CreateTableTemplateReq.template:type_name -> cap.Template
	38, // 42: cap.CreateTableTemplateRsp.template:type_name -> cap.Template
	14, // 43: cap.FilterBody.conditions:type_name -> cap.Condition
	1,  // 44: cap.HrefAction.href_style:type_name -> cap.HrefStyle
	6,  // 45: cap.RowAction.action_type:type_name -> cap.RowActionType
	46, // 46: cap.RowAction.href_action:type_name -> cap.HrefAction
	8,  // 47: cap.GetTableColumnOptionsRsp.options:type_name -> cap.OptionValue
	11, // 48: cap.TableWService.GetTableInfo:input_type -> cap.GetTableInfoReq
	39, // 49: cap.TableWService.GetTableTemplates:input_type -> cap.GetTableTemplatesReq
	41, // 50: cap.TableWService.CreateTableTemplate:input_type -> cap.CreateTableTemplateReq
	43, // 51: cap.TableWService.DeleteTableTemplate:input_type -> cap.DeleteTableTemplateReq
	41, // 52: cap.TableWService.UpdateTableTemplate:input_type -> cap.CreateTableTemplateReq
	30, // 53: cap.TableWService.GetTableColumns:input_type -> cap.GetTableColumnsReq
	22, // 54: cap.TableWService.GetTableRows:input_type -> cap.GetTableRowsReq
	24, // 55: cap.TableWService.GetTableRowByID:input_type -> cap.GetTableRowByIDReq
	22, // 56: cap.TableWService.DoExportTable:input_type -> cap.GetTableRowsReq
	50, // 57: cap.TableWService.GetTableColumnOptions:input_type -> cap.GetTableColumnOptionsReq
	53, // 58: cap.TableWService.GetTableRowsLite:input_type -> cap.GetTableRowsLiteReq
	52, // 59: cap.TableWService.GetOptions:input_type -> cap.GetOptionsReq
	48, // 60: cap.TableWService.DoRowFormAction:input_type -> cap.DoRowFormActionReq
	12, // 61: cap.TableWService.GetTableInfo:output_type -> cap.GetTableInfoRsp
	40, // 62: cap.TableWService.GetTableTemplates:output_type -> cap.GetTableTemplatesRsp
	42, // 63: cap.TableWService.CreateTableTemplate:output_type -> cap.CreateTableTemplateRsp
	44, // 64: cap.TableWService.DeleteTableTemplate:output_type -> cap.DeleteTableTemplateRsp
	42, // 65: cap.TableWService.UpdateTableTemplate:output_type -> cap.CreateTableTemplateRsp
	31, // 66: cap.TableWService.GetTableColumns:output_type -> cap.GetTableColumnsRsp
	23, // 67: cap.TableWService.GetTableRows:output_type -> cap.GetTableRowsRsp
	25, // 68: cap.TableWService.GetTableRowByID:output_type -> cap.GetTableRowByIDRsp
	17, // 69: cap.TableWService.DoExportTable:output_type -> cap.ExportTableRsp
	51, // 70: cap.TableWService.GetTableColumnOptions:output_type -> cap.GetTableColumnOptionsRsp
	54, // 71: cap.TableWService.GetTableRowsLite:output_type -> cap.GetTableRowsLiteRsp
	51, // 72: cap.TableWService.GetOptions:output_type -> cap.GetTableColumnOptionsRsp
	49, // 73: cap.TableWService.DoRowFormAction:output_type -> cap.DoRowFormActionRsp
	61, // [61:74] is the sub-list for method output_type
	48, // [48:61] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_pkg_table_proto_table_wservice_proto_init() }
func file_pkg_table_proto_table_wservice_proto_init() {
	if File_pkg_table_proto_table_wservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_table_proto_table_wservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTableRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRowsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRowsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRowByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRowByIDRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFilterMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableColumnsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableColumnsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableTemplatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableTemplatesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableTemplateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableTemplateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HrefAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoRowFormActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoRowFormActionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableColumnOptionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableColumnOptionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRowsLiteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_table_proto_table_wservice_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRowsLiteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_table_proto_table_wservice_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_VString)(nil),
		(*Value_VInt)(nil),
		(*Value_VDouble)(nil),
		(*Value_VDate)(nil),
		(*Value_VTime)(nil),
		(*Value_VBool)(nil),
		(*Value_VOption)(nil),
	}
	file_pkg_table_proto_table_wservice_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*TemplateQuery_TplId)(nil),
		(*TemplateQuery_TmpTpl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_table_proto_table_wservice_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_table_proto_table_wservice_proto_goTypes,
		DependencyIndexes: file_pkg_table_proto_table_wservice_proto_depIdxs,
		EnumInfos:         file_pkg_table_proto_table_wservice_proto_enumTypes,
		MessageInfos:      file_pkg_table_proto_table_wservice_proto_msgTypes,
	}.Build()
	File_pkg_table_proto_table_wservice_proto = out.File
	file_pkg_table_proto_table_wservice_proto_rawDesc = nil
	file_pkg_table_proto_table_wservice_proto_goTypes = nil
	file_pkg_table_proto_table_wservice_proto_depIdxs = nil
}
