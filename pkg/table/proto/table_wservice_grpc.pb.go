// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pkg/table/proto/table_wservice.proto

package cap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableWServiceClient is the client API for TableWService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableWServiceClient interface {
	// 表
	// GetTableInfo 获取表信息
	GetTableInfo(ctx context.Context, in *GetTableInfoReq, opts ...grpc.CallOption) (*GetTableInfoRsp, error)
	// 模板
	// GetTableTemplates 获取表模板信息
	GetTableTemplates(ctx context.Context, in *GetTableTemplatesReq, opts ...grpc.CallOption) (*GetTableTemplatesRsp, error)
	// CreateTableTemplate 创建模板
	CreateTableTemplate(ctx context.Context, in *CreateTableTemplateReq, opts ...grpc.CallOption) (*CreateTableTemplateRsp, error)
	// DeleteTableTemplate 删除模板
	DeleteTableTemplate(ctx context.Context, in *DeleteTableTemplateReq, opts ...grpc.CallOption) (*DeleteTableTemplateRsp, error)
	// UpdateTableTemplate 更新模板
	UpdateTableTemplate(ctx context.Context, in *CreateTableTemplateReq, opts ...grpc.CallOption) (*CreateTableTemplateRsp, error)
	// 数据
	// GetTableColumns 获取表列
	GetTableColumns(ctx context.Context, in *GetTableColumnsReq, opts ...grpc.CallOption) (*GetTableColumnsRsp, error)
	// GetTableRows 获取表行
	GetTableRows(ctx context.Context, in *GetTableRowsReq, opts ...grpc.CallOption) (*GetTableRowsRsp, error)
	// GetTableRowByID 精确获取一行
	GetTableRowByID(ctx context.Context, in *GetTableRowByIDReq, opts ...grpc.CallOption) (*GetTableRowByIDRsp, error)
	// DoExportTable 导出表
	DoExportTable(ctx context.Context, in *GetTableRowsReq, opts ...grpc.CallOption) (*ExportTableRsp, error)
	// GetTableColumnOptions 获取列选项列表（仅ValueType = VT_OPTION时可获取）
	GetTableColumnOptions(ctx context.Context, in *GetTableColumnOptionsReq, opts ...grpc.CallOption) (*GetTableColumnOptionsRsp, error)
	// GetTableRowsLite 简单版获取行列表接口
	GetTableRowsLite(ctx context.Context, in *GetTableRowsLiteReq, opts ...grpc.CallOption) (*GetTableRowsLiteRsp, error)
	// GetOptions 根据Option ID获取
	GetOptions(ctx context.Context, in *GetOptionsReq, opts ...grpc.CallOption) (*GetTableColumnOptionsRsp, error)
	// 执行表单操作
	DoRowFormAction(ctx context.Context, in *DoRowFormActionReq, opts ...grpc.CallOption) (*DoRowFormActionRsp, error)
}

type tableWServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableWServiceClient(cc grpc.ClientConnInterface) TableWServiceClient {
	return &tableWServiceClient{cc}
}

func (c *tableWServiceClient) GetTableInfo(ctx context.Context, in *GetTableInfoReq, opts ...grpc.CallOption) (*GetTableInfoRsp, error) {
	out := new(GetTableInfoRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetTableTemplates(ctx context.Context, in *GetTableTemplatesReq, opts ...grpc.CallOption) (*GetTableTemplatesRsp, error) {
	out := new(GetTableTemplatesRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) CreateTableTemplate(ctx context.Context, in *CreateTableTemplateReq, opts ...grpc.CallOption) (*CreateTableTemplateRsp, error) {
	out := new(CreateTableTemplateRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/CreateTableTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) DeleteTableTemplate(ctx context.Context, in *DeleteTableTemplateReq, opts ...grpc.CallOption) (*DeleteTableTemplateRsp, error) {
	out := new(DeleteTableTemplateRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/DeleteTableTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) UpdateTableTemplate(ctx context.Context, in *CreateTableTemplateReq, opts ...grpc.CallOption) (*CreateTableTemplateRsp, error) {
	out := new(CreateTableTemplateRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/UpdateTableTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetTableColumns(ctx context.Context, in *GetTableColumnsReq, opts ...grpc.CallOption) (*GetTableColumnsRsp, error) {
	out := new(GetTableColumnsRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetTableRows(ctx context.Context, in *GetTableRowsReq, opts ...grpc.CallOption) (*GetTableRowsRsp, error) {
	out := new(GetTableRowsRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetTableRowByID(ctx context.Context, in *GetTableRowByIDReq, opts ...grpc.CallOption) (*GetTableRowByIDRsp, error) {
	out := new(GetTableRowByIDRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableRowByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) DoExportTable(ctx context.Context, in *GetTableRowsReq, opts ...grpc.CallOption) (*ExportTableRsp, error) {
	out := new(ExportTableRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/DoExportTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetTableColumnOptions(ctx context.Context, in *GetTableColumnOptionsReq, opts ...grpc.CallOption) (*GetTableColumnOptionsRsp, error) {
	out := new(GetTableColumnOptionsRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableColumnOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetTableRowsLite(ctx context.Context, in *GetTableRowsLiteReq, opts ...grpc.CallOption) (*GetTableRowsLiteRsp, error) {
	out := new(GetTableRowsLiteRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetTableRowsLite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) GetOptions(ctx context.Context, in *GetOptionsReq, opts ...grpc.CallOption) (*GetTableColumnOptionsRsp, error) {
	out := new(GetTableColumnOptionsRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/GetOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableWServiceClient) DoRowFormAction(ctx context.Context, in *DoRowFormActionReq, opts ...grpc.CallOption) (*DoRowFormActionRsp, error) {
	out := new(DoRowFormActionRsp)
	err := c.cc.Invoke(ctx, "/cap.TableWService/DoRowFormAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableWServiceServer is the server API for TableWService service.
// All implementations must embed UnimplementedTableWServiceServer
// for forward compatibility
type TableWServiceServer interface {
	// 表
	// GetTableInfo 获取表信息
	GetTableInfo(context.Context, *GetTableInfoReq) (*GetTableInfoRsp, error)
	// 模板
	// GetTableTemplates 获取表模板信息
	GetTableTemplates(context.Context, *GetTableTemplatesReq) (*GetTableTemplatesRsp, error)
	// CreateTableTemplate 创建模板
	CreateTableTemplate(context.Context, *CreateTableTemplateReq) (*CreateTableTemplateRsp, error)
	// DeleteTableTemplate 删除模板
	DeleteTableTemplate(context.Context, *DeleteTableTemplateReq) (*DeleteTableTemplateRsp, error)
	// UpdateTableTemplate 更新模板
	UpdateTableTemplate(context.Context, *CreateTableTemplateReq) (*CreateTableTemplateRsp, error)
	// 数据
	// GetTableColumns 获取表列
	GetTableColumns(context.Context, *GetTableColumnsReq) (*GetTableColumnsRsp, error)
	// GetTableRows 获取表行
	GetTableRows(context.Context, *GetTableRowsReq) (*GetTableRowsRsp, error)
	// GetTableRowByID 精确获取一行
	GetTableRowByID(context.Context, *GetTableRowByIDReq) (*GetTableRowByIDRsp, error)
	// DoExportTable 导出表
	DoExportTable(context.Context, *GetTableRowsReq) (*ExportTableRsp, error)
	// GetTableColumnOptions 获取列选项列表（仅ValueType = VT_OPTION时可获取）
	GetTableColumnOptions(context.Context, *GetTableColumnOptionsReq) (*GetTableColumnOptionsRsp, error)
	// GetTableRowsLite 简单版获取行列表接口
	GetTableRowsLite(context.Context, *GetTableRowsLiteReq) (*GetTableRowsLiteRsp, error)
	// GetOptions 根据Option ID获取
	GetOptions(context.Context, *GetOptionsReq) (*GetTableColumnOptionsRsp, error)
	// 执行表单操作
	DoRowFormAction(context.Context, *DoRowFormActionReq) (*DoRowFormActionRsp, error)
	mustEmbedUnimplementedTableWServiceServer()
}

// UnimplementedTableWServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableWServiceServer struct {
}

func (UnimplementedTableWServiceServer) GetTableInfo(context.Context, *GetTableInfoReq) (*GetTableInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableInfo not implemented")
}
func (UnimplementedTableWServiceServer) GetTableTemplates(context.Context, *GetTableTemplatesReq) (*GetTableTemplatesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableTemplates not implemented")
}
func (UnimplementedTableWServiceServer) CreateTableTemplate(context.Context, *CreateTableTemplateReq) (*CreateTableTemplateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableTemplate not implemented")
}
func (UnimplementedTableWServiceServer) DeleteTableTemplate(context.Context, *DeleteTableTemplateReq) (*DeleteTableTemplateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTableTemplate not implemented")
}
func (UnimplementedTableWServiceServer) UpdateTableTemplate(context.Context, *CreateTableTemplateReq) (*CreateTableTemplateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTableTemplate not implemented")
}
func (UnimplementedTableWServiceServer) GetTableColumns(context.Context, *GetTableColumnsReq) (*GetTableColumnsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableColumns not implemented")
}
func (UnimplementedTableWServiceServer) GetTableRows(context.Context, *GetTableRowsReq) (*GetTableRowsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableRows not implemented")
}
func (UnimplementedTableWServiceServer) GetTableRowByID(context.Context, *GetTableRowByIDReq) (*GetTableRowByIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableRowByID not implemented")
}
func (UnimplementedTableWServiceServer) DoExportTable(context.Context, *GetTableRowsReq) (*ExportTableRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoExportTable not implemented")
}
func (UnimplementedTableWServiceServer) GetTableColumnOptions(context.Context, *GetTableColumnOptionsReq) (*GetTableColumnOptionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableColumnOptions not implemented")
}
func (UnimplementedTableWServiceServer) GetTableRowsLite(context.Context, *GetTableRowsLiteReq) (*GetTableRowsLiteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableRowsLite not implemented")
}
func (UnimplementedTableWServiceServer) GetOptions(context.Context, *GetOptionsReq) (*GetTableColumnOptionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedTableWServiceServer) DoRowFormAction(context.Context, *DoRowFormActionReq) (*DoRowFormActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRowFormAction not implemented")
}
func (UnimplementedTableWServiceServer) mustEmbedUnimplementedTableWServiceServer() {}

// UnsafeTableWServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableWServiceServer will
// result in compilation errors.
type UnsafeTableWServiceServer interface {
	mustEmbedUnimplementedTableWServiceServer()
}

func RegisterTableWServiceServer(s grpc.ServiceRegistrar, srv TableWServiceServer) {
	s.RegisterService(&TableWService_ServiceDesc, srv)
}

func _TableWService_GetTableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableInfo(ctx, req.(*GetTableInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetTableTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableTemplates(ctx, req.(*GetTableTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_CreateTableTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).CreateTableTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/CreateTableTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).CreateTableTemplate(ctx, req.(*CreateTableTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_DeleteTableTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).DeleteTableTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/DeleteTableTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).DeleteTableTemplate(ctx, req.(*DeleteTableTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_UpdateTableTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).UpdateTableTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/UpdateTableTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).UpdateTableTemplate(ctx, req.(*CreateTableTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetTableColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableColumnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableColumns(ctx, req.(*GetTableColumnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetTableRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableRows(ctx, req.(*GetTableRowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetTableRowByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableRowByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableRowByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableRowByID(ctx, req.(*GetTableRowByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_DoExportTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).DoExportTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/DoExportTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).DoExportTable(ctx, req.(*GetTableRowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetTableColumnOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableColumnOptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableColumnOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableColumnOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableColumnOptions(ctx, req.(*GetTableColumnOptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetTableRowsLite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowsLiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetTableRowsLite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetTableRowsLite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetTableRowsLite(ctx, req.(*GetTableRowsLiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/GetOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).GetOptions(ctx, req.(*GetOptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableWService_DoRowFormAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRowFormActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableWServiceServer).DoRowFormAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.TableWService/DoRowFormAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableWServiceServer).DoRowFormAction(ctx, req.(*DoRowFormActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TableWService_ServiceDesc is the grpc.ServiceDesc for TableWService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableWService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cap.TableWService",
	HandlerType: (*TableWServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTableInfo",
			Handler:    _TableWService_GetTableInfo_Handler,
		},
		{
			MethodName: "GetTableTemplates",
			Handler:    _TableWService_GetTableTemplates_Handler,
		},
		{
			MethodName: "CreateTableTemplate",
			Handler:    _TableWService_CreateTableTemplate_Handler,
		},
		{
			MethodName: "DeleteTableTemplate",
			Handler:    _TableWService_DeleteTableTemplate_Handler,
		},
		{
			MethodName: "UpdateTableTemplate",
			Handler:    _TableWService_UpdateTableTemplate_Handler,
		},
		{
			MethodName: "GetTableColumns",
			Handler:    _TableWService_GetTableColumns_Handler,
		},
		{
			MethodName: "GetTableRows",
			Handler:    _TableWService_GetTableRows_Handler,
		},
		{
			MethodName: "GetTableRowByID",
			Handler:    _TableWService_GetTableRowByID_Handler,
		},
		{
			MethodName: "DoExportTable",
			Handler:    _TableWService_DoExportTable_Handler,
		},
		{
			MethodName: "GetTableColumnOptions",
			Handler:    _TableWService_GetTableColumnOptions_Handler,
		},
		{
			MethodName: "GetTableRowsLite",
			Handler:    _TableWService_GetTableRowsLite_Handler,
		},
		{
			MethodName: "GetOptions",
			Handler:    _TableWService_GetOptions_Handler,
		},
		{
			MethodName: "DoRowFormAction",
			Handler:    _TableWService_DoRowFormAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/table/proto/table_wservice.proto",
}
