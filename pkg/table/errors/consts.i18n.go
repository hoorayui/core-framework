// generated by cap, DO NOT EDIT.
package errors

import (
	"fmt"
	"framework/pkg/cap/msg/i18n"
	"golang.org/x/text/language"
)

// supported languages:
var Lang_zhCN = language.Make("zh-CN")
var languageMatcher = language.NewMatcher([]language.Tag{Lang_zhCN})

// language matcher
func MatchLang(lang string) (tag language.Tag, err error) {
	langTag := language.Make(lang)
	matchedTag, _, c := languageMatcher.Match(langTag)
	if c < language.High {
		return matchedTag, fmt.Errorf("no confidence language matched")
	}
	return matchedTag, nil
}

// language id definitions:
// ErrAggregateNotSupported 该列(%s.%s)不支持聚合
const ErrAggregateNotSupported = i18n.TrID("v_errors_ErrAggregateNotSupported")

// ErrDataTooLong 输入的数据超过最大长度[%s]
const ErrDataTooLong = i18n.TrID("v_errors_ErrDataTooLong")

// ErrDisableSharingFormToAllUsers 禁止向所有用户共享表单
const ErrDisableSharingFormToAllUsers = i18n.TrID("v_errors_ErrDisableSharingFormToAllUsers")

// ErrDriverNotFoundForTable 无法找到表(%s)的数据驱动
const ErrDriverNotFoundForTable = i18n.TrID("v_errors_ErrDriverNotFoundForTable")

// ErrDuplicateEntry 已存在重复记录
const ErrDuplicateEntry = i18n.TrID("v_errors_ErrDuplicateEntry")

// ErrDupplicateColumnID 重复列ID(%s)
const ErrDupplicateColumnID = i18n.TrID("v_errors_ErrDupplicateColumnID")

// ErrDupplicateNodeID 重复节点ID(%s)
const ErrDupplicateNodeID = i18n.TrID("v_errors_ErrDupplicateNodeID")

// ErrFailedMapValue 转换数据(%v): dt(%s) => vt(%s) 失败
const ErrFailedMapValue = i18n.TrID("v_errors_ErrFailedMapValue")

// ErrFailedParseConditionValue 解析条件右值失败(%s): %v
const ErrFailedParseConditionValue = i18n.TrID("v_errors_ErrFailedParseConditionValue")

// ErrIllegalArguments 非法参数(%s)
const ErrIllegalArguments = i18n.TrID("v_errors_ErrIllegalArguments")

// ErrInvalidColumnFromStruct invalid column(%s) from struct(%v)
const ErrInvalidColumnFromStruct = i18n.TrID("v_errors_ErrInvalidColumnFromStruct")

// ErrInvalidColumnID 无效的列ID(%s)
const ErrInvalidColumnID = i18n.TrID("v_errors_ErrInvalidColumnID")

// ErrInvalidConditionValue 无效的条件右值数量, 应该输入 (%s) 个参数, 实际输入了 (%d) 个参数
const ErrInvalidConditionValue = i18n.TrID("v_errors_ErrInvalidConditionValue")

// ErrInvalidConditionValueType 无效的列(%s)右值类型, want (%s), got (%s)
const ErrInvalidConditionValueType = i18n.TrID("v_errors_ErrInvalidConditionValueType")

// ErrInvalidRowActionID 无效的操作ID(%s)
const ErrInvalidRowActionID = i18n.TrID("v_errors_ErrInvalidRowActionID")

// ErrInvalidValueForCondition 无效的条件参数(%s)
const ErrInvalidValueForCondition = i18n.TrID("v_errors_ErrInvalidValueForCondition")

// ErrNodeNotExist 节点ID(%s)不存在
const ErrNodeNotExist = i18n.TrID("v_errors_ErrNodeNotExist")

// ErrNotFormAction 该操作(%s)不是一个合法的表单操作
const ErrNotFormAction = i18n.TrID("v_errors_ErrNotFormAction")

// ErrNotResultForID 无法查询到ID(%s)对应的数据
const ErrNotResultForID = i18n.TrID("v_errors_ErrNotResultForID")

// ErrOperatePermissionDenied 没有权限操作其他人创建的模板
const ErrOperatePermissionDenied = i18n.TrID("v_errors_ErrOperatePermissionDenied")

// ErrOperatorNotSupported 操作符(%s)在该列(%s.%s)不被支持
const ErrOperatorNotSupported = i18n.TrID("v_errors_ErrOperatorNotSupported")

// ErrOperatorNotSupportedForColumn 操作符(%s)在该列(%s)不被支持
const ErrOperatorNotSupportedForColumn = i18n.TrID("v_errors_ErrOperatorNotSupportedForColumn")

// ErrOptionNotFound 无法查询到(%d):(%s)
const ErrOptionNotFound = i18n.TrID("v_errors_ErrOptionNotFound")

// ErrResultExceedMaxLimit 查询结果数量[%d]超出单次最大数量[%d]限制，请分次查询
const ErrResultExceedMaxLimit = i18n.TrID("v_errors_ErrResultExceedMaxLimit")

// ErrRowsAffectedZero 数据没有变化
const ErrRowsAffectedZero = i18n.TrID("v_errors_ErrRowsAffectedZero")

// ErrTempTableNotSupportTemplateOp 临时表单不支持模板操作
const ErrTempTableNotSupportTemplateOp = i18n.TrID("v_errors_ErrTempTableNotSupportTemplateOp")

// ErrTplNullOutput 模板输出列为空
const ErrTplNullOutput = i18n.TrID("v_errors_ErrTplNullOutput")

// ErrUnknownOperator 未知的操作符(%s)
const ErrUnknownOperator = i18n.TrID("v_errors_ErrUnknownOperator")
